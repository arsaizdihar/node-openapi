// This file is auto-generated by @hey-api/openapi-ts

import {
  zDeleteApiArticlesBySlugFavoriteResponse,
  zDeleteApiProfilesByUsernameFollowResponse,
  zGetApiArticlesBySlugCommentsResponse,
  zGetApiArticlesBySlugResponse,
  zGetApiArticlesFeedResponse,
  zGetApiArticlesResponse,
  zGetApiProfilesByUsernameResponse,
  zGetApiTagsResponse,
  zGetApiUserResponse,
  zPostApiArticlesBySlugCommentsResponse,
  zPostApiArticlesBySlugFavoriteResponse,
  zPostApiArticlesResponse,
  zPostApiProfilesByUsernameFollowResponse,
  zPostApiUsersLoginResponse,
  zPostApiUsersResponse,
  zPutApiArticlesBySlugResponse,
  zPutApiUserResponse,
} from './zod.gen'
import { client as _heyApiClient } from './client.gen'
import type {
  Client,
  Options as ClientOptions,
  TDataShape,
} from '@hey-api/client-fetch'
import type {
  DeleteApiArticlesBySlugCommentsByIdData,
  DeleteApiArticlesBySlugData,
  DeleteApiArticlesBySlugFavoriteData,
  DeleteApiArticlesBySlugFavoriteResponse,
  DeleteApiProfilesByUsernameFollowData,
  DeleteApiProfilesByUsernameFollowResponse,
  GetApiArticlesBySlugCommentsData,
  GetApiArticlesBySlugCommentsResponse,
  GetApiArticlesBySlugData,
  GetApiArticlesBySlugResponse,
  GetApiArticlesData,
  GetApiArticlesFeedData,
  GetApiArticlesFeedResponse,
  GetApiArticlesResponse,
  GetApiProfilesByUsernameData,
  GetApiProfilesByUsernameResponse,
  GetApiTagsData,
  GetApiTagsResponse,
  GetApiUserData,
  GetApiUserResponse,
  PostApiArticlesBySlugCommentsData,
  PostApiArticlesBySlugCommentsResponse,
  PostApiArticlesBySlugFavoriteData,
  PostApiArticlesBySlugFavoriteResponse,
  PostApiArticlesData,
  PostApiArticlesResponse,
  PostApiProfilesByUsernameFollowData,
  PostApiProfilesByUsernameFollowResponse,
  PostApiUsersData,
  PostApiUsersLoginData,
  PostApiUsersLoginResponse,
  PostApiUsersResponse,
  PutApiArticlesBySlugData,
  PutApiArticlesBySlugResponse,
  PutApiUserData,
  PutApiUserResponse,
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Get articles feed
 * Get articles feed
 */
export const getApiArticlesFeed = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiArticlesFeedData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiArticlesFeedResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zGetApiArticlesFeedResponse.parseAsync(data)
    },
    url: '/api/articles/feed',
    ...options,
  })
}

/**
 * Get articles
 * Get articles
 */
export const getApiArticles = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiArticlesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiArticlesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zGetApiArticlesResponse.parseAsync(data)
    },
    url: '/api/articles',
    ...options,
  })
}

/**
 * Create an article
 */
export const postApiArticles = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiArticlesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiArticlesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zPostApiArticlesResponse.parseAsync(data)
    },
    url: '/api/articles',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete an article
 * Delete an article
 */
export const deleteApiArticlesBySlug = <ThrowOnError extends boolean = true>(
  options: Options<DeleteApiArticlesBySlugData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    url: '/api/articles/{slug}',
    ...options,
  })
}

/**
 * Get an article
 * Get an article
 */
export const getApiArticlesBySlug = <ThrowOnError extends boolean = true>(
  options: Options<GetApiArticlesBySlugData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiArticlesBySlugResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zGetApiArticlesBySlugResponse.parseAsync(data)
    },
    url: '/api/articles/{slug}',
    ...options,
  })
}

/**
 * Update an article
 * Update an article
 */
export const putApiArticlesBySlug = <ThrowOnError extends boolean = true>(
  options: Options<PutApiArticlesBySlugData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiArticlesBySlugResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zPutApiArticlesBySlugResponse.parseAsync(data)
    },
    url: '/api/articles/{slug}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unfavorite an article
 * Unfavorite an article
 */
export const deleteApiArticlesBySlugFavorite = <
  ThrowOnError extends boolean = true,
>(
  options: Options<DeleteApiArticlesBySlugFavoriteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiArticlesBySlugFavoriteResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zDeleteApiArticlesBySlugFavoriteResponse.parseAsync(data)
    },
    url: '/api/articles/{slug}/favorite',
    ...options,
  })
}

/**
 * Favorite an article
 * Favorite an article
 */
export const postApiArticlesBySlugFavorite = <
  ThrowOnError extends boolean = true,
>(
  options: Options<PostApiArticlesBySlugFavoriteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiArticlesBySlugFavoriteResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zPostApiArticlesBySlugFavoriteResponse.parseAsync(data)
    },
    url: '/api/articles/{slug}/favorite',
    ...options,
  })
}

/**
 * Get profile
 * Get profile
 */
export const getApiProfilesByUsername = <ThrowOnError extends boolean = true>(
  options: Options<GetApiProfilesByUsernameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiProfilesByUsernameResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zGetApiProfilesByUsernameResponse.parseAsync(data)
    },
    url: '/api/profiles/{username}',
    ...options,
  })
}

/**
 * Unfollow profile
 * Unfollow profile
 */
export const deleteApiProfilesByUsernameFollow = <
  ThrowOnError extends boolean = true,
>(
  options: Options<DeleteApiProfilesByUsernameFollowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiProfilesByUsernameFollowResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zDeleteApiProfilesByUsernameFollowResponse.parseAsync(data)
    },
    url: '/api/profiles/{username}/follow',
    ...options,
  })
}

/**
 * Follow profile
 * Follow profile
 */
export const postApiProfilesByUsernameFollow = <
  ThrowOnError extends boolean = true,
>(
  options: Options<PostApiProfilesByUsernameFollowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProfilesByUsernameFollowResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zPostApiProfilesByUsernameFollowResponse.parseAsync(data)
    },
    url: '/api/profiles/{username}/follow',
    ...options,
  })
}

/**
 * Login
 * Existing user login
 */
export const postApiUsersLogin = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiUsersLoginData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiUsersLoginResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zPostApiUsersLoginResponse.parseAsync(data)
    },
    url: '/api/users/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Register
 * Register a new user
 */
export const postApiUsers = <ThrowOnError extends boolean = true>(
  options?: Options<PostApiUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiUsersResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zPostApiUsersResponse.parseAsync(data)
    },
    url: '/api/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Get current user
 * Get current user
 */
export const getApiUser = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zGetApiUserResponse.parseAsync(data)
    },
    url: '/api/user',
    ...options,
  })
}

/**
 * Update current user
 * Update current user
 */
export const putApiUser = <ThrowOnError extends boolean = true>(
  options?: Options<PutApiUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).put<
    PutApiUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zPutApiUserResponse.parseAsync(data)
    },
    url: '/api/user',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Get comments
 * Get comments
 */
export const getApiArticlesBySlugComments = <
  ThrowOnError extends boolean = true,
>(
  options: Options<GetApiArticlesBySlugCommentsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiArticlesBySlugCommentsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zGetApiArticlesBySlugCommentsResponse.parseAsync(data)
    },
    url: '/api/articles/{slug}/comments',
    ...options,
  })
}

/**
 * Create a comment
 * Create a comment
 */
export const postApiArticlesBySlugComments = <
  ThrowOnError extends boolean = true,
>(
  options: Options<PostApiArticlesBySlugCommentsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiArticlesBySlugCommentsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    responseValidator: async (data) => {
      return await zPostApiArticlesBySlugCommentsResponse.parseAsync(data)
    },
    url: '/api/articles/{slug}/comments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Delete a comment
 * Delete a comment
 */
export const deleteApiArticlesBySlugCommentsById = <
  ThrowOnError extends boolean = true,
>(
  options: Options<DeleteApiArticlesBySlugCommentsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    url: '/api/articles/{slug}/comments/{id}',
    ...options,
  })
}

/**
 * Get tags
 * Get tags
 */
export const getApiTags = <ThrowOnError extends boolean = true>(
  options?: Options<GetApiTagsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiTagsResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetApiTagsResponse.parseAsync(data)
    },
    url: '/api/tags',
    ...options,
  })
}
